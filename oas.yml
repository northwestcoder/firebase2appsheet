openapi: 3.0.0
info:
  version: 1.0.0
  title: Appsheet Design Pattern
  description: Shows various collections in a RESTful design pattern. Used in Appsheet App.
servers:
  - url: 'https://firebase2appsheet-hb3so6eq3q-uc.a.run.app/'
paths:
  /settings:
    get:
      tags:
        - Settings
      description: Return list of settings.
      summary: Returns list of existing settings.
      operationId: getSettings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Settings
      description: Update Setting completely
      summary: Update an existing setting.
      operationId: updateSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'   
  '/settings/{id}':
    get:
      tags:
        - Setting
      description: Return setting details.
      summary: Return details for an existing setting.
      operationId: getSetting
      parameters:
        - $ref: '#/components/parameters/settingIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Setting
      description: Delete setting.
      summary: Delete an existing setting.
      operationId: deleteSetting
      parameters:
        - $ref: '#/components/parameters/settingIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /persons:
    get:
      tags:
        - Person
      description: Return list of persons.
      summary: Returns list of existing persons.
      operationId: getPersons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Person
      description: Create Person
      summary: Create a new person.
      operationId: createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Person
      description: Update Person completely
      summary: Update an existing person.
      operationId: updatePerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/persons/{id}':
    get:
      tags:
        - Person
      description: Return person details.
      summary: Return details for an existing person.
      operationId: getPerson
      parameters:
        - $ref: '#/components/parameters/personIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Person
      description: Delete person.
      summary: Delete an existing person.
      operationId: deletePerson
      parameters:
        - $ref: '#/components/parameters/personIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /things:
    get:
      tags:
        - Thing
      description: Return list of things.
      summary: Returns list of existing things.
      operationId: getThings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Thing
      description: Create Thing
      summary: Create a new thing.
      operationId: createThing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Thing
      description: Update Thing completely
      summary: Update an existing thing.
      operationId: updateThing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thing'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  '/things/{id}':
    get:
      tags:
        - Thing
      description: Return thing details.
      summary: Return details for an existing thing.
      operationId: getThing
      parameters:
        - $ref: '#/components/parameters/thingIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Thing
      description: Delete thing.
      summary: Delete an existing thing.
      operationId: deleteThing
      parameters:
        - $ref: '#/components/parameters/thingIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events:
    get:
      tags:
        - Event
      description: Return list of Events.
      summary: Returns list of existing events.
      operationId: getEvents
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Event
      description: Create Event
      summary: Create a new event.
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Event
      description: Update Event completely
      summary: Update an existing event.
      operationId: updateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  '/events/{id}':
    get:
      tags:
        - Event
      description: Return event details.
      summary: Return details for an existing event.
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/eventIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Event
      description: Delete event.
      summary: Delete an existing event.
      operationId: deleteEvent
      parameters:
        - $ref: '#/components/parameters/eventIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /places:
    get:
      tags:
        - Place
      description: Return list of places.
      summary: Returns list of existing places.
      operationId: getPlaces
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Place
      description: Create Place
      summary: Create a new place.
      operationId: createPlace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Place
      description: Update Place completely
      summary: Update an existing place.
      operationId: updatePlace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  '/places/{id}':
    get:
      tags:
        - Place
      description: Return place details.
      summary: Return details for an existing place.
      operationId: getPlace
      parameters:
        - $ref: '#/components/parameters/placeIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Place
      description: Delete place.
      summary: Delete an existing place.
      operationId: deletePlace
      parameters:
        - $ref: '#/components/parameters/placeIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contents:
    get:
      tags:
        - Content
      description: Return list of content.
      summary: Returns list of existing content.
      operationId: getContents
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content
      description: Create Content
      summary: Create a new content.
      operationId: createContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contents'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content
      description: Update Content completely
      summary: Update an existing content.
      operationId: updateContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contents'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  '/contents/{id}':
    get:
      tags:
        - Content
      description: Return content details.
      summary: Return details for an existing content.
      operationId: getContent
      parameters:
        - $ref: '#/components/parameters/contentIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content
      description: Delete content.
      summary: Delete an existing content.
      operationId: deleteContent
      parameters:
        - $ref: '#/components/parameters/contentIdPath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-apikey
  parameters:
    personIdPath:
      in: path
      name: id
      description: The person identifier.
      required: true
      schema:
        type: string
    thingIdPath:
      in: path
      name: id
      description: The person identifier.
      required: true
      schema:
        type: string
    eventIdPath:
      in: path
      name: id
      description: The event identifier.
      required: true
      schema:
        type: string
    placeIdPath:
      in: path
      name: id
      description: The place identifier.
      required: true
      schema:
        type: string
    settingIdPath:
      in: path
      name: id
      description: The setting identifier.
      required: true
      schema:
        type: string
    contentIdPath:
      in: path
      name: id
      description: The content identifier.
      required: true
      schema:
        type: string                 
  schemas:
    Settings:
      type: object
      required:
        - id
        - value
      additionalProperties: false
      properties:
        id:
          type: string
        value:
          type: string
    SettingsResponse:
      type: object
      properties:
        Settings:
          type: array
          items:
            $ref: '#/components/schemas/Settings'    
    Contents:
      type: object
      required:
        - id
        - content
      additionalProperties: false
      properties:
        id:
          type: string
        content:
          type: string
    ContentsResponse:
      type: object
      properties:
        Contents:
          type: array
          items:
            $ref: '#/components/schemas/Contents'    
    Person:
      type: object
      required:
        - id
        - Name
      additionalProperties: true
      properties:
        id:
          type: string
        Name:
          type: string
        mobile:
          type: string
        birthdate:
          type: string
          format: date
        tenure:
          type: integer
        address:
          type: string
        email:
          type: string
        photo:
          type: string
        teams:
          type: string
        active:
          type: boolean
    PersonResponse:
      type: object
      properties:
        persons:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    Event:
      type: object
      required:
        - id
        - Name
        - personid
      additionalProperties: true
      properties:
        id:
          type: string
        Name:
          type: string
        personid:
          type: string
        placeid:
          type: string
        thingid:
          type: string
        eventtype:
          type: string
        timestamp:
          type: string
          format: date-time
        duration:
          type: integer
        address:
          type: string
        latlong:
          type: string
        photo:
          type: string
        barcode:
          type: string
        notes:
          type: string
    EventResponse:
      type: object
      properties:
        persons:
          type: array
          items:
            $ref: '#/components/schemas/Event'   
    Place:
      type: object
      required:
        - id
        - Name
      additionalProperties: true
      properties:
        id:
          type: string
        Name:
          type: string
        latlong:
          type: string
        address:
          type: string
        photo:
          type: string
        mainline:
          type: string
        category:
          type: string
    PlaceResponse:
      type: object
      properties:
        persons:
          type: array
          items:
            $ref: '#/components/schemas/Place'
    Thing:
      type: object
      required:
        - id
        - Name
      additionalProperties: true
      properties:
        id:
          type: string
        Name:
          type: string
        productcode:
          type: string
        barcode:
          type: string
        startdate:
          type: string
        enddate:
          type: string
        photo:
          type: string
        price:
          type: number
        supplier:
          type: string
    ThingResponse:
      type: object
      properties:
        persons:
          type: array
          items:
            $ref: '#/components/schemas/Thing'        
    Error:
      type: object
      properties:
        code:
          type: string
        userMessage:
          type: string
        systemMessage:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          description: Used to pass error information in a response.
          type: array
          items:
            $ref: '#/components/schemas/Error'
security:
  - ApiKeyAuth: []